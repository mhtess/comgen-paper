// time ~/webppl-fork/webppl generics-S1.wppl --require utils generic 1

var chain = last(process.argv) // load index as last command line index
// penultimate argument is the semantics
// generic = uncertain threshold
// some = fixed threshold at lowest threshold value
var targetUtterance = process.argv[process.argv.length - 2]

var responseDictionary = { "agree-key": 1, "disagree-key": 0 };

var dataPath = "../../data/generics/endorsement/"
var truthJudgmentDataFile = dataPath + "naturalGenerics-trials-formatted.csv"
var priorDataFile = dataPath + "naturalGenerics-prior-trials-n57.csv"

var d0 = dataFrame(utils.readCSV(priorDataFile).data, ["prevalence"]);
var d1 = dataFrame(utils.readCSV(truthJudgmentDataFile).data);

var data = {
	speaker: map(function(d){
			extend(d, {binaryResponse: responseDictionary[d.response]})
		}, d1.slice(0, d1.length - 1)),
	prior: map(function(d){
		extend(d, {
			// roundedPrevalence: avoidUpperBound(d.prevalence/100),
			roundedPrevalence: avoidEnds(d.prevalence/100),
			counts: Math.round(d.prevalence)
		})
	}, d0.slice(0, d0.length - 1))
};

var properties = levels(data.speaker, "Property")

var utterancePrior = Infer({model: function(){return uniformDraw([targetUtterance,"silence"])}});

var meaning = function(utt,state, theta) {
  return utt === "generic" ? state > theta :
         utt === "generic is false" ? state<=theta :
         utt === "silence" ? true :
         utt === "some?" ? state > _.min(thetaBins) :
         utt === "most" ? state >= 0.5:
         utt === "all" ? state >= 0.99:
         true
}


var model = function(){

	var speakerOptimality = {
		s1: uniformDrift({a:0,b:5, width:0.5})
	};

	foreach(properties, function(p){

		var propertyData = {
			speaker: _.filter(data.speaker, {Property: p}),
			prior: _.filter(data.prior, {Property: p})
		}

		// prior parameters
		var theta = uniformDrift({a: 0, b: 1, width:0.2})

		var betaParams = {
			g: uniformDrift({a: 0, b: 1, width: 0.2}),
			d: uniformDrift({a: 0, b: 100, width: 20})
		}

		var priorParams = betaShape(betaParams);

		var nullParams = {a:1,b:100};

		// observe structured prior data
		mapData({data: propertyData.prior}, function(d){
			// display(d.roundedPrevalence)
			// display(Delta({v: 0}).score(d.roundedPrevalence))
			// display(Beta(priorParams).score(d.roundedPrevalence))
			var scr = util.logsumexp([
				 Math.log(theta) + Beta(priorParams).score(d.roundedPrevalence),
				 Math.log(1-theta) + Beta(nullParams).score(d.roundedPrevalence)
				//  Math.log(1-theta) + Delta({v: 0}).score(d.roundedPrevalence)
			 ])
			//  display(scr)
			 factor(scr)
		})

		// observe structured prior data
		// mapData({data: propertyData.prior}, function(d){
		// 	var di = d.counts;
		// 	factor(Math.log(
		// 		(di==0 ? 1 : 0)*(1-theta)+
		// 		(di> 0 ? 1 : 0) * theta * probability(Binomial({n:100, p:g}), di)))
		// })

		query.add(["prior","isPresent", p, "na"], theta)
		query.add(["prior","prevalenceGivenPresent", p, "mean"], betaParams.g)
		query.add(["prior","prevalenceGivenPresent", p, "sampleSize"], betaParams.d)
		// query.add(["prior","nullParamsB", p, "na"], nullParams.b)
		// query.add(["prior","prevalencePrior", p, "na"],
		// 	beta ( flip(theta) ? priorParams : nullParams) )


		var statePrior = Infer({model: function(){
			sample(flip(theta) ? DiscretizedBeta(priorParams) : DiscretizedBeta(nullParams))
		}});
		// var statePrior = Infer({model: function(){
		// 	sample(flip(theta) ? DiscretizedBeta(priorParams) : Delta({v: 0}))
		// }});

		// var statePrior = Infer({model: function(){
		// 	var component = flip(theta);
		// 	return component ?
		// 		categorical({
		// 			vs: bins,
		// 			ps:map(function(b) {
		// 				return probability(Binomial({n:100,
		// 					p: g}), Math.round(b*100)) +
    //       Number.EPSILON
		// 				}, bins )
		// 		}) : 0
		// }});

		/// RSA model
		var listener0 = cache(function(utterance) {
		  Infer({model: function(){
		    var state = sample(statePrior)
				var theta = targetUtterance === "generic" ? sample(thetaPrior) : -99;
		    var m = meaning(utterance, state, theta)
		    condition(m)
		    return state
		 }})}, 10000)

		var speaker1 = cache(function(speakerBeliefs) {
			Infer({model: function(){
		    var utterance = sample(utterancePrior);
		    var L0 = listener0(utterance);
				factor(speakerOptimality.s1 * L0.score(speakerBeliefs))
				// var _kl = KL(speakerBeliefs, L0, L0.support());
				// factor(speakerOptimality.s1  * -1 * _kl)
		    return utterance === targetUtterance ? 1 : 0
			}})}, 10000)

		var categories = levels(propertyData.speaker, "Category");

		foreach(categories, function(k){

			var categoryData = {
				speaker: _.filter(propertyData.speaker, {Category: k}),
				prior: _.filter(propertyData.prior, {Category: k})
			};

			// var theta_target = uniformDrift({a: 0, b: 1, width:0.2})

			var withinParams = {
				g: uniformDrift({a: 0, b: 1, width: 0.2}),
				d: uniformDrift({a: 0, b: 100, width: 20})
			}

			var withinShape = betaShape(withinParams);
			// var withinKind_params = {
			// 	a: uniformDrift({a: 1, b: 100, width: 2}),
			// 	b: uniformDrift({a: 1, b: 100, width: 2})
			// };

			mapData({data: categoryData.prior}, function(d){
				// display(p+k+ "d = " +d.roundedPrevalence + " " + Beta(withinShape).score(d.roundedPrevalence))
				observe(Beta(withinShape), d.roundedPrevalence)
			})


			// mapData({data: categoryData.prior}, function(d){
			//
			// 	var scr = util.logsumexp([
			// 		 Math.log(theta_target) + Beta(withinShape).score(d.roundedPrevalence),
			// 		 Math.log(1-theta_target) + Delta({v: 0}).score(d.roundedPrevalence)
			// 	 ])
			// 	//  display(scr)
			// 	 factor(scr)
			// })


			// mapData({data: categoryData.prior}, function(d){
			// 	var di = d.counts;
			// 	observe(Binomial({n:100, p: withinKind_prev}), di)
			// })

			// var speakerBeliefs = flip(theta_target) ? sample(DiscretizedBeta(withinShape)) : 0;

			query.add(["targetPrevalence","mean", p, k], withinParams.g)
			query.add(["targetPrevalence","sampleSize", p, k], withinParams.d)

			// query.add(["withinKind","prevalence", p, k], withinKind_prev)
			// displayObj(withinKind_params);
			var speakerBeliefs = sample(DiscretizedBeta(withinShape));

			// var speakerBeliefs = Infer({model: function(){
			// 	return categorical({
			// 			vs:bins,
			// 			ps:map(function(b) {
			// 				return probability(Binomial({n:100,
			// 					p: withinKind_prev}), Math.round(b*100)) +
      //     Number.EPSILON
			// 				}, bins )
			// 		})
			// }});

			// displayObj(speakerBeliefs)
			// display(speakerBeliefs)
			// display(speakerBeliefs)
			var s1prediction = speaker1(speakerBeliefs);
			// var s2prediction = noiseLink(speaker2(speakerBeliefs), noise);
			// display(s2prediction.support())
			var responseData = _.map(categoryData.speaker, "binaryResponse")

			mapData({data:responseData}, function(d){
				var scr = s1prediction.score(d)
				scr == -Infinity ? display(p + " " + k + " " + speakerBeliefs + " "  + d) : null
				observe(s1prediction, d)
			})

			query.add(["predictive",targetUtterance, p, k], expectation(s1prediction) )

		})

	})

	query.add(["param","speakerOptimality","s1","na"], speakerOptimality.s1)

	return query
}

var totalIterations = 25000, lag = 20;
var mhiter = totalIterations/lag, burn = totalIterations / 2;

var outfile = 'results-generics-jointModel-S1-'+'smtncs_'+targetUtterance+"-"+ totalIterations+'_burn'+burn+'_lag'+lag+'_chain'+chain+'.csv'

var posterior = Infer({
  model: model,
	method: "incrementalMH",
  samples: mhiter, burn: burn, lag: lag,
  verbose: T,
  verboseLag: mhiter / 20,
	stream: {
		path: "results/" + outfile,
		header: ["type", "param", "property", "category", "val"]
	}
})

display("written to " + outfile)
